#!/bin/bash

# Get ESP mount point
esp="/boot"
espdev="$(df --output=source /boot | sed -n '2p')"
if [ -z "${espdev}" ];then
    esp="/esp"
    espdev=$(df --output=source /esp | sed -n '2p')
    if [ -z "${espdev}" ];then
        echo -e "\033[31m Error: No ESP partition or unsupported mount point. \033[0m" >&2
        exit -1
    fi
fi

# Read configs
CONFIG=/etc/efistub.conf

if [[ ! -s "${CONFIG}" ]];then
    echo -e "\033[31mError: config does not exist or empty. \033[0m" >&2
    exit -1
fi

startBootnum=$(eval echo $(awk -F: '/^start\-bootnum/{print $2}' "${CONFIG}"))
disk=$(eval echo $(awk -F: '/^disk/{print $2}' "${CONFIG}"))
partnum=$(eval echo $(awk -F: '/^partnum/{print $2}' "${CONFIG}"))
defaultCmdline=$(eval echo $(awk -F: '/^default-cmdline/{print $2}' "${CONFIG}"))

if [ -z "${startBootnum}" ];then
    echo -e "\033[31mError: No start-bootnum specified. \033[0m" >&2
    exit -2
fi

if [ -z "${disk}" ];then
    echo -e "\033[31mError: No disk specified. \033[0m" >&2
    exit -2
fi

if [ -z "${partnum}" ];then
    echo -e "\033[31mError: No partnum specified. \033[0m" >&2
    exit -2
fi

if [ -z "${defaultCmdline}" ];then
    echo -e "\033[31mError: No default-cmdline specified. \033[0m" >&2
    exit -2
fi

if [[ -s "${esp}/intel-ucode.img" ]];then
    ucode="initrd=\\intel-ucode.img"
    echo -e "\e[32mFound intel ucode. \e[0m"
fi

if [[ -s "${esp}/amd-ucode.img" ]];then
    ucode="${ucode} initrd=\\amd-ucode.img"
    echo -e "\e[32mFound amd ucode. \e[0m"
fi

# Check if secure boot is supported.
sb=n
sbsign=$(which sbsign)
if [[ -x "${sbsign}" ]];then
    signkey=$(eval echo $(awk -F: '/^sign-key/{print $2}' "${CONFIG}"))
    signcert=$(eval echo $(awk -F: '/^sign-cert/{print $2}' "${CONFIG}"))
    if [[ -s "${signkey}" ]];then
        if [[ -s "${signcert}" ]];then
            echo -e "\033[32mSecure Boot enabled. \033[0m"
            if [ -z $(ls ${esp}/*.cer 2>/dev/null) ];then
                echo -e "\033[33mWarning: Secure Boot cert file not exist in ESP partition. If you know what you are doing, ignore this. \033[0m"
            fi
            sb=y
        else
            echo -e "\033[33mWarning: Secure Boot cert file not specified or not exist. \033[0m"
        fi
    else
        echo -e "\033[33mWarning: Secure Boot key file not specified or not exist. \033[0m"
    fi
fi

# Clean old EFI entries
bootnum="${startBootnum}"
while [[ -z ${err} ]]
do
    err=$(efibootmgr -q -b ${bootnum} -B 2>&1)
    bootnum=$(expr ${bootnum} + 1)
done

# Generate EFI entries.
bootnum="${startBootnum}"
for i in "${esp}"/vmlinuz*
do
    if [[ ${i} =~ ".signed" ]];then
        continue
    fi
    if [[ ${i} == "${esp}/vmlinuz" ]];then
        kernel="default"
    else
        kernel=${i: 14}
    fi

    configEach=/etc/efistub.d/${kernel}.conf
    if [[ -s "${configEach}" ]];then
        cmdline=$(eval echo $(awk -F: '/^cmdline/{print $2}' "${configEach}"))
        label=$(eval echo $(awk -F: '/^label/{print $2}' "${configEach}"))

        if [ -z "${label}" ];then
            label=${i: 14}
            echo -e "\033[33mWarning: ${configEach}: No label specified. Using ${kernel}. \033[0m"
        fi

        if [ -z "${cmdline}" ];then
            echo -e "\033[31mError: ${configEach}: No cmdline specified. \033[0m" >&2
            exit -3
        fi
    else
        cmdline="${defaultCmdline}"
        label=${kernel}
        echo -e "\033[33mWarning: No config for ${i}. Using defaults. \033[0m"
    fi

    if [[ ${i} == "${esp}/vmlinuz" ]];then
        initramfs="initramfs.img"
    else
        initramfs="initramfs-${kernel}.img"
    fi

    if [ ! -s "${esp}/${initramfs}" ];then
        echo -e "\033[31mError: ${initramfs} does not exist or empty. \033[0m" >&2
        exit -4
    fi

    cmdline="${cmdline} ${ucode} initrd=\\${initramfs}"

    # Sign vmlinuz
    if [[ ${sb} == "y" ]];then
        ${sbsign} --key "${signkey}" --cert "${signcert}" --output "${i}.signed" "${i}"
        echo -e "\033[32m${i} signed. \033[0m"
        efibootmgr -q -b ${bootnum} --disk ${disk} --part ${partnum} --create --label "${label}" --loader "${i: 6}.signed" --unicode "${cmdline}"
    else
        efibootmgr -q -b ${bootnum} --disk ${disk} --part ${partnum} --create --label "${label}" --loader "${i: 6}" --unicode "${cmdline}"
    fi

    echo "Updated ${i: 6}. Label: ${label}, cmdline: ${cmdline}"

    bootnum=$(expr ${bootnum} + 1)
done

echo -e "\e[32mComplete! \e[0m"
